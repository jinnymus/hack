/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hack.validator.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class File extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -895961905092369365L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"File\",\"namespace\":\"com.hack.validator.model\",\"fields\":[{\"name\":\"timePlatform\",\"type\":\"long\"},{\"name\":\"timeDevice\",\"type\":\"long\"},{\"name\":\"activityInfo\",\"type\":\"int\"},{\"name\":\"image\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<File> ENCODER =
      new BinaryMessageEncoder<File>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<File> DECODER =
      new BinaryMessageDecoder<File>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<File> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<File> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<File> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<File>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this File to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a File from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a File instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static File fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long timePlatform;
  @Deprecated public long timeDevice;
  @Deprecated public int activityInfo;
  @Deprecated public java.nio.ByteBuffer image;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public File() {}

  /**
   * All-args constructor.
   * @param timePlatform The new value for timePlatform
   * @param timeDevice The new value for timeDevice
   * @param activityInfo The new value for activityInfo
   * @param image The new value for image
   */
  public File(java.lang.Long timePlatform, java.lang.Long timeDevice, java.lang.Integer activityInfo, java.nio.ByteBuffer image) {
    this.timePlatform = timePlatform;
    this.timeDevice = timeDevice;
    this.activityInfo = activityInfo;
    this.image = image;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timePlatform;
    case 1: return timeDevice;
    case 2: return activityInfo;
    case 3: return image;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timePlatform = (java.lang.Long)value$; break;
    case 1: timeDevice = (java.lang.Long)value$; break;
    case 2: activityInfo = (java.lang.Integer)value$; break;
    case 3: image = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timePlatform' field.
   * @return The value of the 'timePlatform' field.
   */
  public long getTimePlatform() {
    return timePlatform;
  }


  /**
   * Sets the value of the 'timePlatform' field.
   * @param value the value to set.
   */
  public void setTimePlatform(long value) {
    this.timePlatform = value;
  }

  /**
   * Gets the value of the 'timeDevice' field.
   * @return The value of the 'timeDevice' field.
   */
  public long getTimeDevice() {
    return timeDevice;
  }


  /**
   * Sets the value of the 'timeDevice' field.
   * @param value the value to set.
   */
  public void setTimeDevice(long value) {
    this.timeDevice = value;
  }

  /**
   * Gets the value of the 'activityInfo' field.
   * @return The value of the 'activityInfo' field.
   */
  public int getActivityInfo() {
    return activityInfo;
  }


  /**
   * Sets the value of the 'activityInfo' field.
   * @param value the value to set.
   */
  public void setActivityInfo(int value) {
    this.activityInfo = value;
  }

  /**
   * Gets the value of the 'image' field.
   * @return The value of the 'image' field.
   */
  public java.nio.ByteBuffer getImage() {
    return image;
  }


  /**
   * Sets the value of the 'image' field.
   * @param value the value to set.
   */
  public void setImage(java.nio.ByteBuffer value) {
    this.image = value;
  }

  /**
   * Creates a new File RecordBuilder.
   * @return A new File RecordBuilder
   */
  public static com.hack.validator.model.File.Builder newBuilder() {
    return new com.hack.validator.model.File.Builder();
  }

  /**
   * Creates a new File RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new File RecordBuilder
   */
  public static com.hack.validator.model.File.Builder newBuilder(com.hack.validator.model.File.Builder other) {
    if (other == null) {
      return new com.hack.validator.model.File.Builder();
    } else {
      return new com.hack.validator.model.File.Builder(other);
    }
  }

  /**
   * Creates a new File RecordBuilder by copying an existing File instance.
   * @param other The existing instance to copy.
   * @return A new File RecordBuilder
   */
  public static com.hack.validator.model.File.Builder newBuilder(com.hack.validator.model.File other) {
    if (other == null) {
      return new com.hack.validator.model.File.Builder();
    } else {
      return new com.hack.validator.model.File.Builder(other);
    }
  }

  /**
   * RecordBuilder for File instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<File>
    implements org.apache.avro.data.RecordBuilder<File> {

    private long timePlatform;
    private long timeDevice;
    private int activityInfo;
    private java.nio.ByteBuffer image;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hack.validator.model.File.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timePlatform)) {
        this.timePlatform = data().deepCopy(fields()[0].schema(), other.timePlatform);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timeDevice)) {
        this.timeDevice = data().deepCopy(fields()[1].schema(), other.timeDevice);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.activityInfo)) {
        this.activityInfo = data().deepCopy(fields()[2].schema(), other.activityInfo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.image)) {
        this.image = data().deepCopy(fields()[3].schema(), other.image);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing File instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hack.validator.model.File other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timePlatform)) {
        this.timePlatform = data().deepCopy(fields()[0].schema(), other.timePlatform);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeDevice)) {
        this.timeDevice = data().deepCopy(fields()[1].schema(), other.timeDevice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.activityInfo)) {
        this.activityInfo = data().deepCopy(fields()[2].schema(), other.activityInfo);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.image)) {
        this.image = data().deepCopy(fields()[3].schema(), other.image);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'timePlatform' field.
      * @return The value.
      */
    public long getTimePlatform() {
      return timePlatform;
    }


    /**
      * Sets the value of the 'timePlatform' field.
      * @param value The value of 'timePlatform'.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder setTimePlatform(long value) {
      validate(fields()[0], value);
      this.timePlatform = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timePlatform' field has been set.
      * @return True if the 'timePlatform' field has been set, false otherwise.
      */
    public boolean hasTimePlatform() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timePlatform' field.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder clearTimePlatform() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeDevice' field.
      * @return The value.
      */
    public long getTimeDevice() {
      return timeDevice;
    }


    /**
      * Sets the value of the 'timeDevice' field.
      * @param value The value of 'timeDevice'.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder setTimeDevice(long value) {
      validate(fields()[1], value);
      this.timeDevice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeDevice' field has been set.
      * @return True if the 'timeDevice' field has been set, false otherwise.
      */
    public boolean hasTimeDevice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeDevice' field.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder clearTimeDevice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'activityInfo' field.
      * @return The value.
      */
    public int getActivityInfo() {
      return activityInfo;
    }


    /**
      * Sets the value of the 'activityInfo' field.
      * @param value The value of 'activityInfo'.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder setActivityInfo(int value) {
      validate(fields()[2], value);
      this.activityInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'activityInfo' field has been set.
      * @return True if the 'activityInfo' field has been set, false otherwise.
      */
    public boolean hasActivityInfo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'activityInfo' field.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder clearActivityInfo() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'image' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getImage() {
      return image;
    }


    /**
      * Sets the value of the 'image' field.
      * @param value The value of 'image'.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder setImage(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.image = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'image' field has been set.
      * @return True if the 'image' field has been set, false otherwise.
      */
    public boolean hasImage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'image' field.
      * @return This builder.
      */
    public com.hack.validator.model.File.Builder clearImage() {
      image = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public File build() {
      try {
        File record = new File();
        record.timePlatform = fieldSetFlags()[0] ? this.timePlatform : (java.lang.Long) defaultValue(fields()[0]);
        record.timeDevice = fieldSetFlags()[1] ? this.timeDevice : (java.lang.Long) defaultValue(fields()[1]);
        record.activityInfo = fieldSetFlags()[2] ? this.activityInfo : (java.lang.Integer) defaultValue(fields()[2]);
        record.image = fieldSetFlags()[3] ? this.image : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<File>
    WRITER$ = (org.apache.avro.io.DatumWriter<File>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<File>
    READER$ = (org.apache.avro.io.DatumReader<File>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timePlatform);

    out.writeLong(this.timeDevice);

    out.writeInt(this.activityInfo);

    out.writeBytes(this.image);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timePlatform = in.readLong();

      this.timeDevice = in.readLong();

      this.activityInfo = in.readInt();

      this.image = in.readBytes(this.image);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timePlatform = in.readLong();
          break;

        case 1:
          this.timeDevice = in.readLong();
          break;

        case 2:
          this.activityInfo = in.readInt();
          break;

        case 3:
          this.image = in.readBytes(this.image);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










